using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace KubeOps.Generator;

[Generator]
public class EntityDefinitionGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new KubernetesEntitySyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not KubernetesEntitySyntaxReceiver receiver)
        {
            return;
        }

        string source = $@"// <auto-generated/>
using KubeOps.Abstractions.Entities;

/*
{receiver.Entities.Aggregate(new StringBuilder(), (sb, e) => {
    var model = context.Compilation.GetSemanticModel(e.Class.SyntaxTree);


    sb.Append("");
    return sb;
})}
*/
public static class EntityDefinitions 
{{
    {receiver.Entities.Aggregate(new StringBuilder(), (sb, e) => {
        var model = context.Compilation.GetSemanticModel(e.Class.SyntaxTree);

        sb.AppendFormat("public static readonly EntityMetadata<{0}>", "");

        sb.Append("\n\n");
        return sb;
    })}
}}
";
        context.AddSource("EntityDefinitions.g.cs", source);
    }
}
